{"version":3,"file":"static/chunks/916.84f63714276622b6.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AssetDaemonTicksQuery.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationTickDetailDialog.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeRunHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/instigation/Unloadable.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {QueryResult} from '@apollo/client';\nimport {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useAutomaterializeDaemonStatus} from '../assets/AutomaterializeDaemonStatusTag';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink\n          id=\"amp\"\n          title={\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <div>Auto-materialize</div>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <div\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    borderRadius: '50%',\n                    backgroundColor:\n                      automaterialize.paused === false ? Colors.Blue200 : Colors.Gray200,\n                  }}\n                />\n              )}\n            </Box>\n          }\n          to=\"/overview/automaterialize\"\n        />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\n\nexport const ASSET_DAEMON_TICKS_QUERY = gql`\n  query AssetDaemonTicksQuery(\n    $dayRange: Int\n    $dayOffset: Int\n    $statuses: [InstigationTickStatus!]\n    $limit: Int\n    $cursor: String\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    autoMaterializeTicks(\n      dayRange: $dayRange\n      dayOffset: $dayOffset\n      statuses: $statuses\n      limit: $limit\n      cursor: $cursor\n      beforeTimestamp: $beforeTimestamp\n      afterTimestamp: $afterTimestamp\n    ) {\n      id\n      ...AssetDaemonTickFragment\n    }\n  }\n\n  fragment AssetDaemonTickFragment on InstigationTick {\n    id\n    timestamp\n    endTimestamp\n    status\n    instigationType\n    error {\n      ...PythonErrorFragment\n    }\n    requestedAssetKeys {\n      path\n    }\n    requestedAssetMaterializationCount\n    autoMaterializeAssetEvaluationId\n    requestedMaterializationsForAssets {\n      assetKey {\n        path\n      }\n      partitionKeys\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Body2,\n  Box,\n  ButtonGroup,\n  ButtonLink,\n  Checkbox,\n  CursorHistoryControls,\n  Spinner,\n  Table,\n} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\nimport {TickStatusTag} from '../../ticks/TickStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: React.useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n            ],\n      );\n    }, []),\n    encode: React.useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: React.useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <Box>\n      <Box\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        padding={{vertical: 12, horizontal: 24}}\n        margin={{top: 32}}\n        border=\"top\"\n      >\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <ButtonGroup\n            activeItems={new Set(['evaluations'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n          {!queryResult.data ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.STARTED}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SUCCESS}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.FAILURE}\n          />\n          <StatusCheckbox\n            statuses={statuses}\n            setStatuses={setStatuses}\n            status={InstigationTickStatus.SKIPPED}\n          />\n        </Box>\n      </Box>\n      <TableWrapper>\n        <thead>\n          <tr>\n            <th style={{width: 120}}>Timestamp</th>\n            <th style={{width: 90}}>Status</th>\n            <th style={{width: 90}}>Duration</th>\n            <th style={{width: 180}}>Result</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Use previous data to stop page from jumping while new data loads */}\n          {(queryResult.data || queryResult.previousData)?.autoMaterializeTicks.map(\n            (tick, index) => {\n              // This is a hack for ticks that get stuck in started\n              const isTickStuckInStartedState =\n                index !== 0 &&\n                tick.status === InstigationTickStatus.STARTED &&\n                !paginationProps.hasPrevCursor;\n\n              return (\n                <tr key={tick.id}>\n                  <td>\n                    <Timestamp\n                      timestamp={{unix: tick.timestamp}}\n                      timeFormat={{showTimezone: true}}\n                    />\n                  </td>\n                  <td>\n                    <TickStatusTag tick={tick} isStuckStarted={isTickStuckInStartedState} />\n                  </td>\n                  <td>\n                    {isTickStuckInStartedState ? (\n                      ' - '\n                    ) : (\n                      <TimeElapsed startUnix={tick.timestamp} endUnix={tick.endTimestamp} />\n                    )}\n                  </td>\n                  <td>\n                    {[InstigationTickStatus.SKIPPED, InstigationTickStatus.SUCCESS].includes(\n                      tick.status,\n                    ) ? (\n                      <ButtonLink\n                        onClick={() => {\n                          setSelectedTick(tick);\n                        }}\n                      >\n                        <Body2>\n                          {tick.requestedAssetMaterializationCount} materializations requested\n                        </Body2>\n                      </ButtonLink>\n                    ) : (\n                      ' - '\n                    )}\n                  </td>\n                </tr>\n              );\n            },\n          )}\n        </tbody>\n      </TableWrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\nconst StatusLabels = {\n  [InstigationTickStatus.SKIPPED]: 'None requested',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n};\n\nfunction StatusCheckbox({\n  status,\n  statuses,\n  setStatuses,\n}: {\n  status: InstigationTickStatus;\n  statuses: Set<InstigationTickStatus>;\n  setStatuses: (statuses: Set<InstigationTickStatus>) => void;\n}) {\n  return (\n    <Checkbox\n      label={StatusLabels[status]}\n      checked={statuses.has(status)}\n      onChange={() => {\n        const newStatuses = new Set(statuses);\n        if (statuses.has(status)) {\n          newStatuses.delete(status);\n        } else {\n          newStatuses.add(status);\n        }\n        setStatuses(newStatuses);\n      }}\n    />\n  );\n}\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Subtitle2, Caption, Icon, Spinner} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {AssetKeyInput, InstigationTickStatus} from '../../graphql/types';\nimport {TickDetailSummary} from '../../instigation/TickDetailsDialog';\nimport {HeaderCell, Inner, Row, RowCell} from '../../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../../workspace/workspacePath';\nimport {AssetLink} from '../AssetLink';\nimport {\n  AssetKeysDialog,\n  AssetKeysDialogHeader,\n  AssetKeysDialogEmptyState,\n} from '../AutoMaterializePolicyPage/AssetKeysDialog';\nimport {assetDetailsPathForKey} from '../assetDetailsPathForKey';\n\nimport {AssetDaemonTickFragment} from './types/AssetDaemonTicksQuery.types';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/AutomaterializationTickDetailDialog.types';\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const AutomaterializationTickDetailDialog = React.memo(\n  ({\n    tick,\n    isOpen,\n    close,\n  }: {\n    tick: AssetDaemonTickFragment | null;\n    isOpen: boolean;\n    close: () => void;\n  }) => {\n    const [queryString, setQueryString] = React.useState('');\n\n    const filteredAssetKeys = React.useMemo(\n      () =>\n        tick\n          ? tick.requestedAssetKeys.filter((assetKey) =>\n              assetKey.path.join('/').includes(queryString),\n            )\n          : [],\n      [tick, queryString],\n    );\n\n    const count = tick?.requestedAssetKeys.length || 0;\n\n    const parentRef = React.useRef<HTMLDivElement | null>(null);\n    const rowVirtualizer = useVirtualizer({\n      count: filteredAssetKeys.length,\n      getScrollElement: () => parentRef.current,\n      estimateSize: () => 34,\n      overscan: 10,\n    });\n    const totalHeight = rowVirtualizer.getTotalSize();\n    const items = rowVirtualizer.getVirtualItems();\n\n    const assetKeyToPartitionsMap = React.useMemo(() => {\n      const map: Record<string, string[]> = {};\n      tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n        map[tokenForAssetKey(assetKey)] = partitionKeys;\n      });\n      return map;\n    }, [tick?.requestedMaterializationsForAssets]);\n\n    const content = React.useMemo(() => {\n      if (queryString && !filteredAssetKeys.length) {\n        return (\n          <AssetKeysDialogEmptyState\n            title=\"No matching asset keys\"\n            description={\n              <>\n                No matching asset keys for <strong>{queryString}</strong>\n              </>\n            }\n          />\n        );\n      }\n      if (!tick?.requestedAssetKeys.length) {\n        return (\n          <Box padding={{vertical: 12, horizontal: 24}}>\n            <Caption color={Colors.Gray700}>None</Caption>\n          </Box>\n        );\n      }\n      return (\n        <div style={{overflow: 'scroll'}} ref={parentRef}>\n          <Box\n            border=\"top-and-bottom\"\n            style={{\n              display: 'grid',\n              gridTemplateColumns: TEMPLATE_COLUMNS,\n              height: '32px',\n              fontSize: '12px',\n              color: Colors.Gray600,\n              position: 'sticky',\n              top: 0,\n              zIndex: 1,\n              background: Colors.White,\n            }}\n          >\n            <HeaderCell>Asset</HeaderCell>\n            <HeaderCell>Group</HeaderCell>\n            <HeaderCell>Result</HeaderCell>\n          </Box>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const assetKey = filteredAssetKeys[index]!;\n              return (\n                <AssetDetailRow\n                  key={key}\n                  $height={size}\n                  $start={start}\n                  assetKey={assetKey}\n                  partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                  evaluationId={tick.autoMaterializeAssetEvaluationId!}\n                />\n              );\n            })}\n          </Inner>\n        </div>\n      );\n    }, [assetKeyToPartitionsMap, filteredAssetKeys, items, queryString, tick, totalHeight]);\n\n    return (\n      <AssetKeysDialog\n        isOpen={isOpen}\n        setIsOpen={close}\n        height={400}\n        header={\n          <AssetKeysDialogHeader\n            title={\n              tick ? (\n                <div>\n                  <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n                </div>\n              ) : (\n                ''\n              )\n            }\n            showSearch={count > 0}\n            placeholder=\"Filter by asset key…\"\n            queryString={queryString}\n            setQueryString={setQueryString}\n          />\n        }\n        content={\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateRows: 'auto auto minmax(0, 1fr)',\n              height: '100%',\n            }}\n          >\n            <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n              {tick ? <TickDetailSummary tick={tick} /> : null}\n            </Box>\n            {tick?.status === InstigationTickStatus.STARTED ? null : (\n              <>\n                <Box\n                  padding={{vertical: 12, horizontal: 24}}\n                  border={filteredAssetKeys.length > 0 ? undefined : 'bottom'}\n                >\n                  <Subtitle2>Materializations requested</Subtitle2>\n                </Box>\n                {content}\n              </>\n            )}\n          </div>\n        }\n      />\n    );\n  },\n);\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: number;\n}) => {\n  const numMaterializations = partitionKeys?.length || 1;\n  const {data} = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.Gray400} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.Gray400}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          <Link\n            to={assetDetailsPathForKey(assetKey, {\n              view: 'auto-materialize-history',\n              evaluation: `${evaluationId}`,\n            })}\n          >\n            {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'} requested\n          </Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {ButtonGroup, Box, CursorHistoryControls} from '@dagster-io/ui-components';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {RunTable} from '../../runs/RunTable';\nimport {RUNS_ROOT_QUERY} from '../../runs/RunsRoot';\nimport {RunsRootQuery, RunsRootQueryVariables} from '../../runs/types/RunsRoot.types';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\nexport const AutomaterializeRunHistoryTable = ({\n  setTableView,\n}: {\n  setTableView: (view: 'evaluations' | 'runs') => void;\n}) => {\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    RunsRootQuery,\n    RunsRootQueryVariables\n  >({\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n    variables: {\n      filter: {\n        tags: [{key: 'dagster/auto_materialize', value: 'true'}],\n      },\n    },\n    query: RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 15 * 1000);\n\n  const runData = (queryResult.data || queryResult.previousData)?.pipelineRunsOrError;\n\n  return (\n    <Box>\n      <Wrapper>\n        <Box padding={{vertical: 12, horizontal: 24}} margin={{top: 32}} border=\"top\">\n          <ButtonGroup\n            activeItems={new Set(['runs'])}\n            buttons={[\n              {id: 'evaluations', label: 'Evaluations'},\n              {id: 'runs', label: 'Runs'},\n            ]}\n            onClick={(id: 'evaluations' | 'runs') => {\n              setTableView(id);\n            }}\n          />\n        </Box>\n        <RunTable runs={runData?.__typename === 'Runs' ? runData.results : []} />\n      </Wrapper>\n      <div style={{paddingBottom: '16px'}}>\n        <CursorHistoryControls {...paginationProps} />\n      </div>\n    </Box>\n  );\n};\n\n// Super hacky but easiest solution to position the action button\nconst Wrapper = styled.div`\n  position: relative;\n  > *:nth-child(2) {\n    position: absolute;\n    right: 0;\n    top: 0;\n  }\n`;\n","import {useLazyQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Page,\n  Colors,\n  Checkbox,\n  Spinner,\n  Subtitle2,\n  Heading,\n  PageHeader,\n  Table,\n} from '@dagster-io/ui-components';\nimport React, {useLayoutEffect} from 'react';\n\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isOldTickWithoutEndtimestamp} from '../../instigation/util';\nimport {OverviewTabs} from '../../overview/OverviewTabs';\nimport {useAutomaterializeDaemonStatus} from '../AutomaterializeDaemonStatusTag';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n  AssetDaemonTickFragment,\n} from './types/AssetDaemonTicksQuery.types';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const AutomaterializationRoot = () => {\n  useTrackPageView();\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n  const [isPaused, setIsPaused] = React.useState(false);\n  const [statuses, setStatuses] = React.useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = React.useState<undefined | [number, number]>(undefined);\n  const variables: AssetDaemonTicksQueryVariables = React.useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {\n      afterTimestamp: (Date.now() - TWENTY_MINUTES) / 1000,\n    };\n  }, [statuses, timeRange]);\n  function fetchData() {\n    fetch({\n      variables,\n    });\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(fetchData, [variables]);\n  useQueryRefreshAtInterval(queryResult, 2 * 1000, !isPaused && !timeRange && !statuses, fetchData);\n\n  const [selectedTick, setSelectedTick] = React.useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    React.useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const ids = data ? data.autoMaterializeTicks.map((tick) => `${tick.id}:${tick.status}`) : [];\n  while (ids.length < 100) {\n    // Super hacky but we need to keep the memo args length the same...\n    // And the memo below prevents us from changing the ticks reference every second\n    // which avoids a bunch of re-rendering\n    ids.push('');\n  }\n  const ticks = React.useMemo(\n    () => {\n      const ticks = data?.autoMaterializeTicks;\n      return (\n        ticks?.map((tick, index) => {\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (index !== 0 && !isOldTickWithoutEndtimestamp(tick) && !tick.endTimestamp) {\n            const copy = {...tick};\n            copy.endTimestamp = ticks[index - 1]!.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...ids.slice(0, 100)],\n  );\n  const onHoverTick = React.useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"amp\" />} />\n      <Box\n        padding={{vertical: 12, horizontal: 24}}\n        flex={{direction: 'column', gap: 12}}\n        background={Colors.Gray50}\n      >\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box padding={{vertical: 48}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            key={selectedTick?.id}\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <AutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n  Spinner,\n  Colors,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n  });\n\n  const {state: statusState} = statusFilter;\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Box padding={{vertical: 12, horizontal: 20}}>\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Colors,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: Colors.White,\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = (typeof group)['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => tokenForAssetKey(asset.key) === key);\n      if (!asset?.definition) {\n        console.warn('Expected a definition for asset with key', key);\n        return;\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: asset.key,\n        definition: asset.definition,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.Gray500}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.Green500,\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.Gray900}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.Gray600};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.Gray700}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    // With a very large number of runs, operating on the Apollo cache is too expensive and\n    // can block the main thread. This data has to be up-to-the-second fresh anyway, so just\n    // skip the cache entirely.\n    fetchPolicy: 'no-cache',\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Colors,\n  Group,\n  Table,\n  Subheading,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors = ({\n  sensorStates,\n  showSubheading = true,\n}: {\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules = ({\n  scheduleStates,\n  showSubheading = true,\n}: {\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickStatusTag tick={latestTick} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow = ({scheduleState}: {scheduleState: InstigationStateFragment}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>{latestTick ? <TickStatusTag tick={latestTick} /> : null}</td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert = ({count}: {count: number}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/automaterialize\">\n        <AutomaterializationRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n"],"names":["_obj","OverviewTabs","props","refreshState","tab","automaterialize","useAutomaterializeDaemonStatus","jsx_runtime","jsxs","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","jsx","TabLink","id","title","to","gap","div","loading","Spinner","purpose","style","width","height","borderRadius","backgroundColor","paused","Colors","Blue200","Gray200","padding","bottom","QueryRefreshCountdown","ASSET_DAEMON_TICKS_QUERY","gql","PYTHON_ERROR_FRAGMENT","AutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","React","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","variables","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","start","timestamp","end","endTimestamp","undefined","vertical","horizontal","margin","top","border","ButtonGroup","activeItems","buttons","label","onClick","StatusCheckbox","status","SKIPPED","TableWrapper","thead","tr","th","tbody","previousData","_this","map","tick","index","isTickStuckInStartedState","td","Timestamp","unix","timeFormat","showTimezone","TickStatusTag","isStuckStarted","TimeElapsed","startUnix","endUnix","includes","ButtonLink","Body2","requestedAssetMaterializationCount","paddingBottom","CursorHistoryControls","StatusLabels","_define_property","_","Checkbox","checked","has","onChange","newStatuses","delete","add","styled","Table","TEMPLATE_COLUMNS","AutomaterializationTickDetailDialog","isOpen","close","queryString","setQueryString","filteredAssetKeys","requestedAssetKeys","filter","assetKey","path","join","count","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","content","AssetKeysDialogEmptyState","description","Fragment","strong","overflow","ref","display","gridTemplateColumns","fontSize","color","Gray600","position","zIndex","background","White","HeaderCell","Inner","$totalHeight","key","size","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","Caption","Gray700","AssetKeysDialog","setIsOpen","header","AssetKeysDialogHeader","showSearch","placeholder","gridTemplateRows","TickDetailSummary","Subtitle2","numMaterializations","useQuery","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","__typename","definition","repoAddress","buildRepoAddress","repository","name","location","Row","RowGrid","RowCell","AssetLink","icon","textStyle","groupName","Link","workspacePathFromAddress","concat","Icon","Gray400","assetDetailsPathForKey","view","evaluation","AutomaterializeRunHistoryTable","runs","pipelineRunsOrError","results","tags","value","RUNS_ROOT_QUERY","runData","Wrapper","RunTable","withConfig","AutomaterializationRoot","fetchData","fetch","useTrackPageView","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useLazyQuery","isPaused","setIsPaused","timeRange","afterTimestamp","beforeTimestamp","Date","now","TWENTY_MINUTES","useLayoutEffect","selectedTick","cursor","tableView","ids","push","isOldTickWithoutEndtimestamp","copy","_object_spread","_to_consumable_array","slice","onHoverTick","Page","PageHeader","Heading","tabs","Gray50","Alert","intent","a","href","target","rel","format","disabled","_async_to_generator","e","_state","sent","setPaused","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","labelForBackfillStatus","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","match","InstanceBackfills","useDocumentTitle","queryData","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusFilter","useStaticSetFilter","allValues","allowMultipleSelections","closeOnSelect","renderLabel","getStringValue","state","useFilters","filters","button","activeFiltersJsx","BACKFILLS_QUERY","statusState","result","partitionBackfillsOrError","FIFTEEN_SECONDS","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","refetch","CursorPaginationControls","INSTANCE_HEALTH_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","wrap","Detail","detail","ms","Number","showSeconds","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","assetBackfillStatuses","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","StatusBar","Tag","minWidth","Label","Gray100","Green500","Red500","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewAssetsRoot","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","assets","groups","assetsOrError","nodes","repositoryName","values","qs","searchQuery","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","grow","selected","TextInput","Container","VirtualHeaderRow","VirtualRow","assetKeys","liveDataByNode","useAssetsLiveData","successful","inprogress","missing","assetLiveData","find","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","LOADING","SOURCE_OBSERVING","SOURCE_OBSERVED","SOURCE_NEVER_OBSERVED","SOURCE_NO_STATE","MATERIALIZING","LATE_OR_FAILED","NEVER_MATERIALIZED","MATERIALIZED","PARTITIONS_FAILED","PARTITIONS_MISSING","PARTITIONS_MATERIALIZED","repo","useViewport","containerProps","viewport","isBatchStillLoading","zeroOrBlank","Cell","fontWeight","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","SelectOnHover","getCount","numMissing","adjective","Gray500","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","numMaterialized","children","Gray900","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","text","paddingLeft","whiteSpace","textOverflow","partitionCountString","onItemSelect","RepoFilterButton","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","onClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","DialogFooter","Button","rightIcon","useHourWindow","defaultValue","validate","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","startSec","endSec","RUN_TIMELINE_QUERY","inProgressFilter","_object_spread_props","createdBefore","terminatedFilter","doneStatuses","updatedAfter","tickCursor","ticksUntil","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","min","sort","b","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","LOOKAHEAD_HOURS","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","visibleJobs","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","useDelayedState","delayMsec","setValue","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","Tooltip","placement","canShow","OverviewJobsTable","repos","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","_param_showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","ScheduleStateRow","element","selectorId","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","onChangeSwitch","jobOriginId","jobSelectorId","lacksPermission","latestTick","toggleOffInFlight","STOPPED","DEFAULT_DISABLED_REASON","Group","spacing","InstigatorSelectorInformation","instigatorState","Gray300","InstigatedRunStatus","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","humanCronString","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","initialState","getKey","TruncatedTextWithFullTextOnHover","onStateChanged","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","OVERVIEW_SCHEDULES_QUERY","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","overview_OverviewRoot"],"sourceRoot":""}